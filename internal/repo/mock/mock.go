// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/interface.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/object.application/internal/entity"
)

// MockObjectRepository is a mock of ObjectRepository interface.
type MockObjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockObjectRepositoryMockRecorder
}

// MockObjectRepositoryMockRecorder is the mock recorder for MockObjectRepository.
type MockObjectRepositoryMockRecorder struct {
	mock *MockObjectRepository
}

// NewMockObjectRepository creates a new mock instance.
func NewMockObjectRepository(ctrl *gomock.Controller) *MockObjectRepository {
	mock := &MockObjectRepository{ctrl: ctrl}
	mock.recorder = &MockObjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectRepository) EXPECT() *MockObjectRepositoryMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockObjectRepository) DeleteObject(ctx context.Context, bucket string, objectID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, bucket, objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectRepositoryMockRecorder) DeleteObject(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectRepository)(nil).DeleteObject), ctx, bucket, objectID)
}

// GetObject mocks base method.
func (m *MockObjectRepository) GetObject(ctx context.Context, bucket string, objectID int64) (*entity.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucket, objectID)
	ret0, _ := ret[0].(*entity.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectRepositoryMockRecorder) GetObject(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectRepository)(nil).GetObject), ctx, bucket, objectID)
}

// GetObjectByBucketAndContent mocks base method.
func (m *MockObjectRepository) GetObjectByBucketAndContent(ctx context.Context, bucket, content string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByBucketAndContent", ctx, bucket, content)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByBucketAndContent indicates an expected call of GetObjectByBucketAndContent.
func (mr *MockObjectRepositoryMockRecorder) GetObjectByBucketAndContent(ctx, bucket, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByBucketAndContent", reflect.TypeOf((*MockObjectRepository)(nil).GetObjectByBucketAndContent), ctx, bucket, content)
}

// PutObject mocks base method.
func (m *MockObjectRepository) PutObject(ctx context.Context, bucket, objectContent string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucket, objectContent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObjectRepositoryMockRecorder) PutObject(ctx, bucket, objectContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObjectRepository)(nil).PutObject), ctx, bucket, objectContent)
}
