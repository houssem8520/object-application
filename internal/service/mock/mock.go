// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/object.application/internal/entity"
)

// MockObjectService is a mock of ObjectService interface.
type MockObjectService struct {
	ctrl     *gomock.Controller
	recorder *MockObjectServiceMockRecorder
}

// MockObjectServiceMockRecorder is the mock recorder for MockObjectService.
type MockObjectServiceMockRecorder struct {
	mock *MockObjectService
}

// NewMockObjectService creates a new mock instance.
func NewMockObjectService(ctrl *gomock.Controller) *MockObjectService {
	mock := &MockObjectService{ctrl: ctrl}
	mock.recorder = &MockObjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectService) EXPECT() *MockObjectServiceMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockObjectService) DeleteObject(ctx context.Context, bucket string, objectID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, bucket, objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectServiceMockRecorder) DeleteObject(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectService)(nil).DeleteObject), ctx, bucket, objectID)
}

// GetObject mocks base method.
func (m *MockObjectService) GetObject(ctx context.Context, bucket string, objectID int64) (*entity.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucket, objectID)
	ret0, _ := ret[0].(*entity.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectServiceMockRecorder) GetObject(ctx, bucket, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectService)(nil).GetObject), ctx, bucket, objectID)
}

// PutObject mocks base method.
func (m *MockObjectService) PutObject(ctx context.Context, bucket, objectContent string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucket, objectContent)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObjectServiceMockRecorder) PutObject(ctx, bucket, objectContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObjectService)(nil).PutObject), ctx, bucket, objectContent)
}
