// Code generated by go-swagger; DO NOT EDIT.

package secure_object_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/object.application/models"
)

// GetSecureObjectHandlerFunc turns a function with the right signature into a get secure object handler
type GetSecureObjectHandlerFunc func(GetSecureObjectParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSecureObjectHandlerFunc) Handle(params GetSecureObjectParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetSecureObjectHandler interface for that can handle valid get secure object params
type GetSecureObjectHandler interface {
	Handle(GetSecureObjectParams, *models.Principal) middleware.Responder
}

// NewGetSecureObject creates a new http.Handler for the get secure object operation
func NewGetSecureObject(ctx *middleware.Context, handler GetSecureObjectHandler) *GetSecureObject {
	return &GetSecureObject{Context: ctx, Handler: handler}
}

/* GetSecureObject swagger:route GET /secure/objects/{bucket}/{objectID} Secure Object Management getSecureObject

Get object by bucket name and object id.

*/
type GetSecureObject struct {
	Context *middleware.Context
	Handler GetSecureObjectHandler
}

func (o *GetSecureObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSecureObjectParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetSecureObjectOKBody get secure object o k body
//
// swagger:model GetSecureObjectOKBody
type GetSecureObjectOKBody struct {

	// object
	// Required: true
	Object *models.Object `json:"object"`
}

// Validate validates this get secure object o k body
func (o *GetSecureObjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSecureObjectOKBody) validateObject(formats strfmt.Registry) error {

	if err := validate.Required("getSecureObjectOK"+"."+"object", "body", o.Object); err != nil {
		return err
	}

	if o.Object != nil {
		if err := o.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSecureObjectOK" + "." + "object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSecureObjectOK" + "." + "object")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get secure object o k body based on the context it is used
func (o *GetSecureObjectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSecureObjectOKBody) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if o.Object != nil {
		if err := o.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSecureObjectOK" + "." + "object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSecureObjectOK" + "." + "object")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSecureObjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSecureObjectOKBody) UnmarshalBinary(b []byte) error {
	var res GetSecureObjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
