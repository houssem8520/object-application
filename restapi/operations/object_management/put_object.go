// Code generated by go-swagger; DO NOT EDIT.

package object_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutObjectHandlerFunc turns a function with the right signature into a put object handler
type PutObjectHandlerFunc func(PutObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutObjectHandlerFunc) Handle(params PutObjectParams) middleware.Responder {
	return fn(params)
}

// PutObjectHandler interface for that can handle valid put object params
type PutObjectHandler interface {
	Handle(PutObjectParams) middleware.Responder
}

// NewPutObject creates a new http.Handler for the put object operation
func NewPutObject(ctx *middleware.Context, handler PutObjectHandler) *PutObject {
	return &PutObject{Context: ctx, Handler: handler}
}

/* PutObject swagger:route PUT /objects/{bucket} Object Management putObject

Add an object in a bucket.

*/
type PutObject struct {
	Context *middleware.Context
	Handler PutObjectHandler
}

func (o *PutObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutObjectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutObjectCreatedBody put object created body
//
// swagger:model PutObjectCreatedBody
type PutObjectCreatedBody struct {

	// id
	ID int64 `json:"id,omitempty"`
}

// Validate validates this put object created body
func (o *PutObjectCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put object created body based on context it is used
func (o *PutObjectCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutObjectCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutObjectCreatedBody) UnmarshalBinary(b []byte) error {
	var res PutObjectCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
