// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "text/plain"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This API is dedicated to store objects to a bucket.",
    "title": "S3",
    "contact": {
      "name": "Houssem Aloulou"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/auth/callback": {
      "get": {
        "security": [],
        "tags": [
          "Security"
        ],
        "summary": "return access_token",
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "security": [],
        "tags": [
          "Security"
        ],
        "summary": "login through oauth2 server",
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/objects/{bucket}": {
      "put": {
        "security": [],
        "tags": [
          "Object Management"
        ],
        "summary": "Add an object in a bucket.",
        "operationId": "putObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "description": "object content.",
            "name": "http-text",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to put object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    },
    "/objects/{bucket}/{objectID}": {
      "get": {
        "security": [],
        "tags": [
          "Object Management"
        ],
        "summary": "Get object by bucket name and object id.",
        "operationId": "getObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "required": [
                "object"
              ],
              "properties": {
                "object": {
                  "$ref": "#/definitions/object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to list groups."
          },
          "503": {
            "description": "Not available."
          }
        }
      },
      "delete": {
        "security": [],
        "tags": [
          "Object Management"
        ],
        "summary": "delete an object.",
        "operationId": "deleteObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to delete object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    },
    "/secure/objects/{bucket}": {
      "put": {
        "tags": [
          "Secure Object Management"
        ],
        "summary": "Add an object in a bucket.",
        "operationId": "putSecureObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "description": "object content.",
            "name": "http-text",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to put object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    },
    "/secure/objects/{bucket}/{objectID}": {
      "get": {
        "tags": [
          "Secure Object Management"
        ],
        "summary": "Get object by bucket name and object id.",
        "operationId": "getSecureObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "required": [
                "object"
              ],
              "properties": {
                "object": {
                  "$ref": "#/definitions/object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to list groups."
          },
          "503": {
            "description": "Not available."
          }
        }
      },
      "delete": {
        "tags": [
          "Secure Object Management"
        ],
        "summary": "delete an object.",
        "operationId": "deleteSecureObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to delete object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "object": {
      "required": [
        "id",
        "data"
      ],
      "properties": {
        "data": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "OauthSecurity": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
      "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
      "scopes": {
        "admin": "Admin scope",
        "user": "User scope"
      }
    }
  },
  "security": [
    {
      "OauthSecurity": [
        "user"
      ]
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "text/plain"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This API is dedicated to store objects to a bucket.",
    "title": "S3",
    "contact": {
      "name": "Houssem Aloulou"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/auth/callback": {
      "get": {
        "security": [],
        "tags": [
          "Security"
        ],
        "summary": "return access_token",
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "security": [],
        "tags": [
          "Security"
        ],
        "summary": "login through oauth2 server",
        "responses": {
          "200": {
            "description": "login",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string",
                  "format": "string"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/objects/{bucket}": {
      "put": {
        "security": [],
        "tags": [
          "Object Management"
        ],
        "summary": "Add an object in a bucket.",
        "operationId": "putObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "description": "object content.",
            "name": "http-text",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to put object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    },
    "/objects/{bucket}/{objectID}": {
      "get": {
        "security": [],
        "tags": [
          "Object Management"
        ],
        "summary": "Get object by bucket name and object id.",
        "operationId": "getObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "required": [
                "object"
              ],
              "properties": {
                "object": {
                  "$ref": "#/definitions/object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to list groups."
          },
          "503": {
            "description": "Not available."
          }
        }
      },
      "delete": {
        "security": [],
        "tags": [
          "Object Management"
        ],
        "summary": "delete an object.",
        "operationId": "deleteObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to delete object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    },
    "/secure/objects/{bucket}": {
      "put": {
        "tags": [
          "Secure Object Management"
        ],
        "summary": "Add an object in a bucket.",
        "operationId": "putSecureObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "description": "object content.",
            "name": "http-text",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to put object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    },
    "/secure/objects/{bucket}/{objectID}": {
      "get": {
        "tags": [
          "Secure Object Management"
        ],
        "summary": "Get object by bucket name and object id.",
        "operationId": "getSecureObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "schema": {
              "type": "object",
              "required": [
                "object"
              ],
              "properties": {
                "object": {
                  "$ref": "#/definitions/object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to list groups."
          },
          "503": {
            "description": "Not available."
          }
        }
      },
      "delete": {
        "tags": [
          "Secure Object Management"
        ],
        "summary": "delete an object.",
        "operationId": "deleteSecureObject",
        "parameters": [
          {
            "type": "string",
            "description": "Bucket name.",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "object id.",
            "name": "objectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Not authenticated."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Object not found."
          },
          "500": {
            "description": "Failed to delete object."
          },
          "503": {
            "description": "Not available."
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "object": {
      "required": [
        "id",
        "data"
      ],
      "properties": {
        "data": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "OauthSecurity": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
      "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
      "scopes": {
        "admin": "Admin scope",
        "user": "User scope"
      }
    }
  },
  "security": [
    {
      "OauthSecurity": [
        "user"
      ]
    }
  ]
}`))
}
